namespace EntityFrameWorkCodeAlong.Migrations
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.Linq;

    internal sealed class Configuration : DbMigrationsConfiguration<EntityFrameWorkCodeAlong.DataAccessLayer.ShopContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = false;
        }

        protected override void Seed(EntityFrameWorkCodeAlong.DataAccessLayer.ShopContext context)
        {
            //  This method will be called after migrating to the latest version.

            //  You can use the DbSet<T>.AddOrUpdate() helper extension method 
            //  to avoid creating duplicate seed data.

            context.Formats.AddOrUpdate(x => x.Name,
                                                     new Models.Format() { Name = "DVD" },
                                                     new Models.Format() { Name="BluRay" });


            context.Movies.AddOrUpdate(x => x.Title,
                                                     new Models.Movie() { Title = "Sraw Rats", Genre = "Scifi", Length = 230, Director = "BOB", ReleaseDate = DateTime.Now.AddYears(-35) },
                                                      new Models.Movie() { Title = "Kert Rats", Genre = "Scifi", Length = 30, Director = "BOB", ReleaseDate = DateTime.Now.AddYears(-35) },
                                                       new Models.Movie() { Title = "Kerhs", Genre = "Scifi", Length = 120, Director = "BOB", ReleaseDate = DateTime.Now.AddYears(-35) },
                                                        new Models.Movie() { Title = "Etag Rats", Genre = "Scifi", Length = 72, Director = "BOB", ReleaseDate = DateTime.Now.AddYears(-35) });

            context.Customers.AddOrUpdate(x => x.Name,                                       //dont use property which is auto generated by db(in x.)
                                                          new Models.Customer() { Name = "Billy", DateOfBirth = DateTime.Now.AddYears(-5),CustomerNr=152, Adress = "Blabla Street", PhoneNum = "07213478" },

                                                            new Models.Customer() { Name = "Steve", DateOfBirth = DateTime.Now.AddYears(-50), CustomerNr = 1232, Adress = "Blabla Street", PhoneNum = "072188785" },
                                                              new Models.Customer() { Name = "Sara", DateOfBirth = DateTime.Now.AddYears(-35), CustomerNr = 1210, Adress = "Blabla Street", PhoneNum = "072454545" });

            context.SaveChanges();

            foreach (Models.Movie m in context.Movies)
            {
                context.MovieFormatStocks.AddOrUpdate(x => x.ReleaseDate,
                                                                new Models.MovieFormatStock() { AmountInStock = 100, FormatId = context.Formats.ToList()[0].Id, MovieId = m.Id, ReleaseDate = m.ReleaseDate.AddMonths(2), },   //context.Formats.First() this is used for to find first format in db,we are adding actual value for IDs than virtual
                                                                  new Models.MovieFormatStock() { AmountInStock = (50*m.Id)+m.Id, FormatId = context.Formats.ToList()[1].Id, MovieId = m.Id, ReleaseDate = m.ReleaseDate.AddMonths(2), });



            }

            context.SaveChanges();
            int i = 1;
            foreach (Models.Customer c in context.Customers)
            {
                context.Orders.AddOrUpdate(x => x.Orderdate,
                    new Models.Order()
                    {
                        CustomerId = c.Id,
                        HasBeenSent = false,
                        Orderdate = DateTime.Now.AddYears(-(2 + c.Id)),
                        OrderNr = i * i * 2,
                        MovieFormats = new List<Models.MovieFormatStock> { context.MovieFormatStocks.ToList()[i++] }
                    },
                    new Models.Order()
                    {
                        CustomerId = c.Id,
                        HasBeenSent = false,
                        Orderdate = DateTime.Now.AddYears(-(1 + c.Id)),
                        OrderNr = i * i * 3,
                        MovieFormats = new List<Models.MovieFormatStock>() { context.MovieFormatStocks.ToList()[i++] }
                    });
            }
            context.SaveChanges();














        }
    }
}
